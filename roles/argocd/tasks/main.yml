---
- name: Add ArgoCD Helm repository
  command: "helm repo add argo https://argoproj.github.io/argo-helm"

- name: Update helm repo
  command: "helm repo update"

- name: Check if argocd namespace already exists
  command: "kubectl get namespace argocd"
  register: argocd_namespace_check
  ignore_errors: true
  changed_when: false

- name: Create argocd namespace if it doesn't exist
  command: "kubectl create namespace argocd"
  when: argocd_namespace_check.rc != 0

- name: Check if ArgoCd server service exists
  command: "kubectl get svc -n argocd argocd-server"
  register: argocd_check
  ignore_errors: true
  changed_when: false

- name: Install ArgoCD via Helm if it doesn't exist
  command: "helm install argocd argo/argo-cd --namespace argocd  --values=../roles/argocd/files/argocd_values.yml"
  when: argocd_check.rc != 0

- name: Check if ArgoCD image-updater deployment exists
  command: "kubectl get deployment argocd-image-updater"
  register: argocd_check
  ignore_errors: true
  changed_when: false

- name: Install ArgoCD image updater via Helm if it doesn't exist
  command: "helm install argocd-image-updater argo/argocd-image-updater --namespace argocd  --values=../roles/argocd/files/argocd_image_updater_values.yml"
  when: argocd_check.rc != 0

- name: Generate ingress.yml
  template:
    src: "ingress-argocd.yml.j2"
    dest: "../roles/argocd/files/ingress.yml"
    mode: "0644"

- name: Check if ingress.yaml was applied
  shell: "kubectl describe ingressroute argocd-server -n argocd"
  register: ingress_exists
  ignore_errors: true
  changed_when: false

- name: Apply ingress.yaml if it doesn't exist
  shell: "kubectl apply -f ../roles/argocd/files/ingress.yml"
  when: ingress_exists.rc != 0

- name: Check if Traefik middleware exists
  command: "kubectl get middleware -o jsonpath='{.items}'"
  register: middleware_check
  changed_when: false

- name: Apply default headers configuration if middleware doesn't exist
  shell: "kubectl apply -f ../roles/argocd/files/default-headers.yml"
  when: middleware_check.stdout.find('[]') != -1

- name: Fetch Argo CD admin initial password
  shell: "argocd admin initial-password -n argocd | awk '/^[[:alnum:]]+$/ { print $1; exit }'"
  register: argocd_password_output

- name: Set admin password variable
  set_fact:
    argocd_admin_password: "{{ argocd_password_output.stdout }}"

- name: Log temp admin password
  debug:
    var: argocd_admin_password

- name: Login to Argo CD
  command: argocd login {{ ingress_subdomain }} --username admin --password "{{ argocd_admin_password }}"
  ignore_errors: true

- name: Update Argo CD admin password
  shell: "argocd account update-password --current-password {{ argocd_admin_password }} --new-password {{ argo_cd_password }}"
  register: update_password_output
  ignore_errors: true
